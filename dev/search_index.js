var documenterSearchIndex = {"docs":
[{"location":"Zernike/#Zernike","page":"Zernike","title":"Zernike","text":"","category":"section"},{"location":"Zernike/","page":"Zernike","title":"Zernike","text":"The Zernike polynomials are a family of orthogonal polynomials over the unit disk, rho in 01, theta in 0 2pi.  They were originally defined in \"Beugungstheorie des schneidenver-fahrens und seiner verbesserten form,der phasenkontrastmethode\", F. Zernike (1934).  A more typical citation is \"Zernike polynomials and atmospheric turbulence,\" Noll (1976).","category":"page"},{"location":"Zernike/","page":"Zernike","title":"Zernike","text":"The implementation in this library utilizes the property that, given a Jacobi polynomial of order n with weights alphabeta equiv P_n^(alphabeta)(x), the radial component of the Zernike polynomials for argument rho is P_(n-m)2^(0m)(2rho^2 -1).  This is combined with a simple sin(mtheta) or cosine equivalent, depending on the sign of m.  The implementation here reflects that.","category":"page"},{"location":"Zernike/#Usage","page":"Zernike","title":"Usage","text":"","category":"section"},{"location":"Zernike/","page":"Zernike","title":"Zernike","text":"The Zernike usage follows from the jacobi one, the function should be called on arrays, i.e. without dot syntax.","category":"page"},{"location":"Zernike/","page":"Zernike","title":"Zernike","text":"using OpticsPolynomials\nusing GridCreation\nusing Plots\nx, y = mkCartVecs(1/64, 128); # -1,1\nr, t = cartVecsToPolarGrid(x,y);\ndata = zernike(3,1,r,t;norm=false);\ndata[r.>1].=NaN; # mask outside unit disk for visuals\nheatmap(data, aspect_ratio=:equal);\npng(\"coma-heatmap\");","category":"page"},{"location":"Zernike/","page":"Zernike","title":"Zernike","text":"(Image: )","category":"page"},{"location":"Zernike/#Core-Functions","page":"Zernike","title":"Core Functions","text":"","category":"section"},{"location":"Zernike/","page":"Zernike","title":"Zernike","text":"zernike\nzernike_series\nzernike_sum\nzernike_norm","category":"page"},{"location":"Zernike/#OpticsPolynomials.zernike","page":"Zernike","title":"OpticsPolynomials.zernike","text":"zernike(n, m, ρ, θ[; norm])\n\nZernike polynomial of radial order n and azimuthal order m, evaluated at the point (ρ, θ).  No normalization is required of (ρ, θ), though the polynomials are orthogonal only over the unit disk.\n\nnorm is a boolean flag indicating whether the result should be orthonormalized (scaled to unit RMS) or not.\n\nThe zernike polynomials' radial basis is a special case of the Jacobi polynomials under the transformation n_jacobi = (n-m)/2, α=0, β=|m|, x=2ρ^2-1.\n\nSee also: zernike_series, zernike_sum.\n\n\n\n\n\n","category":"function"},{"location":"Zernike/#OpticsPolynomials.zernike_series","page":"Zernike","title":"OpticsPolynomials.zernike_series","text":"zernike_series(nms, ρ, θ[; norm])\n\nCompute a series of Zernike polynomials of orders (n,m). Returns an array with shape (size(ρ)..., length(nms)). That is, the final dimension contains the modes and the first dimension(s) are spatial.\n\nSee also: zernike, zernike_sum\n\n\n\n\n\n","category":"function"},{"location":"Zernike/#OpticsPolynomials.zernike_sum","page":"Zernike","title":"OpticsPolynomials.zernike_sum","text":"zernike_sum(nms, weights, ρ, θ[; norm])\n\nCompute a sum of Zernike polynomials of orders (n,m) weighted by weights.\n\nSee also: zernike, zernike_series\n\n\n\n\n\n","category":"function"},{"location":"Zernike/#OpticsPolynomials.zernike_norm","page":"Zernike","title":"OpticsPolynomials.zernike_norm","text":"zernike_norm(n, m)\n\nNorm of Zernike polynomial of radial order n, azimuthal order m.\n\nThe norm is the average squared distance to zero.  By multiplying a zernike value by the norm, the term is given unit stdev or RMS.\n\n\n\n\n\n","category":"function"},{"location":"Zernike/#Index-Conversions","page":"Zernike","title":"Index Conversions","text":"","category":"section"},{"location":"Zernike/","page":"Zernike","title":"Zernike","text":"This package includes a suite of functions for converting between various indexing schemes.  All functions work for arbitrary order.","category":"page"},{"location":"Zernike/#Noll","page":"Zernike","title":"Noll","text":"","category":"section"},{"location":"Zernike/","page":"Zernike","title":"Zernike","text":"zernike_noll_to_nm","category":"page"},{"location":"Zernike/#OpticsPolynomials.zernike_noll_to_nm","page":"Zernike","title":"OpticsPolynomials.zernike_noll_to_nm","text":"zernike_noll_to_nm(j)\n\nMap j Noll index to ANSI (n,m) indices.\n\n\n\n\n\n","category":"function"},{"location":"Zernike/#Fringe","page":"Zernike","title":"Fringe","text":"","category":"section"},{"location":"Zernike/","page":"Zernike","title":"Zernike","text":"zernike_fringe_to_nm\nzernike_nm_to_fringe","category":"page"},{"location":"Zernike/#OpticsPolynomials.zernike_fringe_to_nm","page":"Zernike","title":"OpticsPolynomials.zernike_fringe_to_nm","text":"zernike_fringe_to_nm(j)\n\nMap j Fringe index to ANSI (n,m) indices.\n\n\n\n\n\n","category":"function"},{"location":"Zernike/#OpticsPolynomials.zernike_nm_to_fringe","page":"Zernike","title":"OpticsPolynomials.zernike_nm_to_fringe","text":"zernike_nm_to_fringe(n, m)\n\nMap (n,m) ANSI indices to a single fringe index.\n\n\n\n\n\n","category":"function"},{"location":"Zernike/#ANSI-Z80.28:2004","page":"Zernike","title":"ANSI Z80.28:2004","text":"","category":"section"},{"location":"Zernike/","page":"Zernike","title":"Zernike","text":"zernike_ansi_j_to_nm\nzernike_nm_to_ansi_j","category":"page"},{"location":"Zernike/#OpticsPolynomials.zernike_ansi_j_to_nm","page":"Zernike","title":"OpticsPolynomials.zernike_ansi_j_to_nm","text":"zernike_ansi_to_ansi_j(n, m)\n\nMap (n,m) ANSI indices to a single ANSI j index.\n\nSee also:     - zernike_nm_to_ansi_j (reciprocal of this function)\n\n\n\n\n\n","category":"function"},{"location":"Zernike/#OpticsPolynomials.zernike_nm_to_ansi_j","page":"Zernike","title":"OpticsPolynomials.zernike_nm_to_ansi_j","text":"zernike_nm_to_ansi_j(n, m)\n\nMap (n,m) ANSI indices to a single ANSI j index.\n\nSee also:     - zernike_ansi_j_to_nm (reciprocal of this function)\n\n\n\n\n\n","category":"function"},{"location":"Zernike/#Utilities","page":"Zernike","title":"Utilities","text":"","category":"section"},{"location":"Zernike/","page":"Zernike","title":"Zernike","text":"zernike_zero_separation\napply_weights","category":"page"},{"location":"Zernike/#OpticsPolynomials.zernike_zero_separation","page":"Zernike","title":"OpticsPolynomials.zernike_zero_separation","text":"zernike_zero_separation(n)\n\nMinimum zero separation of Zernike polynomial of radial order n.  Useful for computing sample count requirements.\n\n\n\n\n\n","category":"function"},{"location":"Zernike/#OpticsPolynomials.apply_weights","page":"Zernike","title":"OpticsPolynomials.apply_weights","text":"apply_weights(data, weights)\n\nGiven data of arbitrary dimensionality with multiple realizations or modes along the final dimension, weight the final dimension by weights and return the sum.\n\nWill have one fewer dimension than the input data.\n\n\n\n\n\n","category":"function"},{"location":"Legendre/#Legendre","page":"Legendre","title":"Legendre","text":"","category":"section"},{"location":"Legendre/","page":"Legendre","title":"Legendre","text":"The Legendre polynomials are orthogonal over the univariate domain x in -11.  They are special cases of the Jacobi polynomials for alpha = beta = -0.  The implementation in this library uses a recurrence relation for the Jacobi polynomials to compute them.  It is fast and stable to high order n.","category":"page"},{"location":"Legendre/#Usage","page":"Legendre","title":"Usage","text":"","category":"section"},{"location":"Legendre/","page":"Legendre","title":"Legendre","text":"The Legendre usage follows from the jacobi one, in that the input is an array or a scalar with substantially higher performance when invoked on arrays.  See the Jacobi documentation for more detailed information on this matter.","category":"page"},{"location":"Legendre/","page":"Legendre","title":"Legendre","text":"The key API is mirrored, substituting jacobi for legendreto produce legendre, legendre_series, and legendre_sum.","category":"page"},{"location":"Legendre/","page":"Legendre","title":"Legendre","text":"using OpticsPolynomials\nusing Plots\n\nx = collect(-1:0.01:1);\ny = legendre(5,x);\nplot(x,y)\npng(\"legendre-5\");","category":"page"},{"location":"Legendre/","page":"Legendre","title":"Legendre","text":"(Image: )","category":"page"},{"location":"Legendre/","page":"Legendre","title":"Legendre","text":"using OpticsPolynomials\nusing Plots\n\nx = collect(-1:0.01:1);\ny = legendre_series([1,2,3,4,5],x);\nplot(x,y)\npng(\"legendre-series\");","category":"page"},{"location":"Legendre/","page":"Legendre","title":"Legendre","text":"(Image: )","category":"page"},{"location":"Legendre/#Core-Functions","page":"Legendre","title":"Core Functions","text":"","category":"section"},{"location":"Legendre/","page":"Legendre","title":"Legendre","text":"legendre\nlegendre_series\nlegendre_sum","category":"page"},{"location":"Legendre/#OpticsPolynomials.legendre","page":"Legendre","title":"OpticsPolynomials.legendre","text":"legendre(n, x)\n\nCompute the Legendre polynomial of order n at point x.\n\nThe Legendre polynomials are a special case of the Jacobi polynomials with α, β = 0.\n\nSee also: legendre_series, legendre_sum\n\n\n\n\n\n","category":"function"},{"location":"Legendre/#OpticsPolynomials.legendre_series","page":"Legendre","title":"OpticsPolynomials.legendre_series","text":"legendre_series(ns, α, β, x)\n\nCompute a series of Legendre polynomials of orders n. Returns an array with shape (size(x)..., length(ns)). That is, the final dimension contains the modes and the first dimension(s) are spatial.\n\nSee also: legendre, legendre_sum\n\n\n\n\n\n","category":"function"},{"location":"Legendre/#OpticsPolynomials.legendre_sum","page":"Legendre","title":"OpticsPolynomials.legendre_sum","text":"legendre_sum(ns, weights, x)\n\nCompute a sum of Legendre polynomial of order n weighted by weights.\n\nSee also: legendre, legendre_series\n\n\n\n\n\n","category":"function"},{"location":"Jacobi/#Jacobi","page":"Jacobi","title":"Jacobi","text":"","category":"section"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"The Jacobi polynomials are a family of orthogonal polynomials over the univariate domain x in -11 with respect to weighting parameters alpha beta.  The implementation in this library uses a recurrence relation to compute them.  It is fast and stable to high order n.  The recurrence relation is:","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"a cdot P_n^(alphabeta) = b cdot x cdot P_n-1^(alphabeta) - c cdot P_n-2^(alphabeta)","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"for some scalar abc.  Consult \"Handbook of Mathematical Functions,\" Abramowitz and Stegun or Wikipedia for more information, for example on the meaning of alpha and beta.","category":"page"},{"location":"Jacobi/#Usage","page":"Jacobi","title":"Usage","text":"","category":"section"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"The input vector or array x must be a scalar.  It may have any number of dimensions.  For evaluating a single polynomial, you should use the jacobi function:","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"using OpticsPolynomials\nusing Plots\n\nx = collect(-1:0.01:1);\ny = jacobi(25, 0., 0., x);\nplot(x,y)\npng(\"jacobi-5\");","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"(Image: )","category":"page"},{"location":"Jacobi/#Multiple-orders-at-once","page":"Jacobi","title":"Multiple orders at once","text":"","category":"section"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"For multiple polynomials, you should use jacobi_series:","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"using OpticsPolynomials\nusing Plots\nusing BenchmarkTools\n\nx2=collect(-1:0.0001:1);\n@benchmark jacobi_series(1:100, 0., 0., $x2)\nplot(x2, jacobi_series(1:5, 0., 0., x2))\npng(\"jacobi-set\")","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"(Image: )","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"produces:","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"  memory estimate:  15.72 MiB\n  allocs estimate:  129\n  --------------\n  minimum time:     356.801 μs (0.00% GC)\n  median time:      410.901 μs (0.00% GC)\n  mean time:        756.492 μs (44.86% GC)\n  maximum time:     3.220 ms (72.07% GC)\n  --------------\n  samples:          6598\n  evals/sample:     1","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"As compares to:","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"function series_simple(ns, α, β, x)\n\tout = Array{eltype(x), 2}(undef, length(x), length(ns))\n\tfor i in eachindex(ns)\n\t\tview = selectdim(out, 2, i)\n\t\tview .= jacobi5(ns[i], α, β, x)\n\tend\n\treturn out\nend\n\n@benchmark series_simple(1:100, 0., 0., $x2)","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"BenchmarkTools.Trial:\n  memory estimate:  60.62 MiB\n  allocs estimate:  596\n  --------------\n  minimum time:     56.425 ms (1.75% GC)\n  median time:      61.686 ms (5.18% GC)\n  mean time:        63.276 ms (5.55% GC)\n  maximum time:     72.470 ms (7.30% GC)\n  --------------\n  samples:          80\n  evals/sample:     1","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"The speedup is 158x.","category":"page"},{"location":"Jacobi/#Sums","page":"Jacobi","title":"Sums","text":"","category":"section"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"For sums of polynomials, you should use jacobi_sum:","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"using OpticsPolynomials\nusing Plots\n\nx3=collect(-1:0.01:1);\n# polynomial order 1..10, uniform weights 0.01\njacsum = jacobi_sum(1:7, fill(0.01, 7), 0., 0., x3)\nplot(x3, jacsum)\npng(\"jacobi-sum\")","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"(Image: )","category":"page"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"The speedup of this function compared to the naive approach is similar.","category":"page"},{"location":"Jacobi/#Core-Functions","page":"Jacobi","title":"Core Functions","text":"","category":"section"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"jacobi\njacobi_series\njacobi_sum","category":"page"},{"location":"Jacobi/#OpticsPolynomials.jacobi","page":"Jacobi","title":"OpticsPolynomials.jacobi","text":"jacobi(n, α, β, x)\n\nCompute the Jacobi polynomial of order n and weights α,β at point x.\n\nThis function uses a recurrence relation and is numerical stable to very high order.  The computation time is linear w.r.t. the order n.  jacobi(n, a, b, x) is also linear w.r.t. the size of argument x.  x should be passed as an array, and jacobi should not be called with dot syntax, for best performance.\n\nSee also: jacobi_series, jacobi_sum\n\n\n\n\n\n","category":"function"},{"location":"Jacobi/#OpticsPolynomials.jacobi_series","page":"Jacobi","title":"OpticsPolynomials.jacobi_series","text":"jacobi_series(ns, α, β, x)\n\nCompute a series of Jacobi polynomials of orders n.  Returns an array with shape (size(x)..., length(ns)).  That is, the final dimension contains the modes and the first dimension(s) are spatial.\n\nSee also: jacobi, jacobi_sum\n\n\n\n\n\n","category":"function"},{"location":"Jacobi/#OpticsPolynomials.jacobi_sum","page":"Jacobi","title":"OpticsPolynomials.jacobi_sum","text":"jacobi_sum(ns, weights, α, β, x)\n\nCompute a sum of Jacobi polynomial of order n weighted by weights.\n\nSee also: jacobi, jacobi_series\n\n\n\n\n\n","category":"function"},{"location":"Jacobi/#Utilities","page":"Jacobi","title":"Utilities","text":"","category":"section"},{"location":"Jacobi/","page":"Jacobi","title":"Jacobi","text":"jacobi_weight","category":"page"},{"location":"Jacobi/#OpticsPolynomials.jacobi_weight","page":"Jacobi","title":"OpticsPolynomials.jacobi_weight","text":"jacobi_weight(α, β, x)\n\nCompute the weighting function (1-x)^α * (1-x)^β .\n\n\n\n\n\n","category":"function"},{"location":"Chebyshev/#Chebyshev","page":"Chebyshev","title":"Chebyshev","text":"","category":"section"},{"location":"Chebyshev/","page":"Chebyshev","title":"Chebyshev","text":"The Chebyshev polynomials are two families of orthogonal polynomials over the univariate domain x in -11.  They are special cases of the Jacobi polynomials for alpha = beta = -12 for the Chebyshev polynomials of the first kind, and alpha = beta = 12 for the Chebyshev polynomials of the second kind.  The implementation in this library uses a recurrence relation for the Jacobi polynomials to compute them.  It is fast and stable to high order n.","category":"page"},{"location":"Chebyshev/#Usage","page":"Chebyshev","title":"Usage","text":"","category":"section"},{"location":"Chebyshev/","page":"Chebyshev","title":"Chebyshev","text":"The Chebyshev usage follows from the jacobi one, in that the input is an array or a scalar with substantially higher performance when invoked on arrays.  See the Jacobi documentation for more detailed information on this matter.","category":"page"},{"location":"Chebyshev/","page":"Chebyshev","title":"Chebyshev","text":"The key API is mirrored, substituting jacobi for cheby1 or cheby2 to produce cheby1, cheby1_series, and cheby1_sum and associated cheby2 functions.","category":"page"},{"location":"Chebyshev/","page":"Chebyshev","title":"Chebyshev","text":"using OpticsPolynomials\nusing Plots\n\nx = collect(-1:0.01:1);\ny = cheby1(5,x);\nplot(x,y)\npng(\"cheby1-5\");","category":"page"},{"location":"Chebyshev/","page":"Chebyshev","title":"Chebyshev","text":"(Image: )","category":"page"},{"location":"Chebyshev/","page":"Chebyshev","title":"Chebyshev","text":"The visual difference between the polynomials of the first and second kind can be seen:","category":"page"},{"location":"Chebyshev/","page":"Chebyshev","title":"Chebyshev","text":"using OpticsPolynomials\nusing Plots\n\nx = collect(-1:0.01:1);\ny = cheby1_series([1,2,3,4,5],x);\nplot(x,y)\npng(\"cheby1-series\");\n\ny = cheby2_series([1,2,3,4,5],x);\nplot(x,y)\npng(\"cheby2-series\");","category":"page"},{"location":"Chebyshev/#First-Kind","page":"Chebyshev","title":"First Kind","text":"","category":"section"},{"location":"Chebyshev/","page":"Chebyshev","title":"Chebyshev","text":"(Image: )","category":"page"},{"location":"Chebyshev/#Second-Kind","page":"Chebyshev","title":"Second Kind","text":"","category":"section"},{"location":"Chebyshev/","page":"Chebyshev","title":"Chebyshev","text":"(Image: )","category":"page"},{"location":"Chebyshev/#Core-Functions","page":"Chebyshev","title":"Core Functions","text":"","category":"section"},{"location":"Chebyshev/","page":"Chebyshev","title":"Chebyshev","text":"OpticsPolynomials.cheby1\nOpticsPolynomials.cheby1_series\nOpticsPolynomials.cheby1_sum\nOpticsPolynomials.cheby2\nOpticsPolynomials.cheby2_series\nOpticsPolynomials.cheby2_sum","category":"page"},{"location":"Chebyshev/#OpticsPolynomials.cheby1","page":"Chebyshev","title":"OpticsPolynomials.cheby1","text":"cheby1(n, x)\n\nCompute the Chebyshev polynomial of the first kind of order n at point x.\n\nThis family of Chebyshev polynomials are a special case of the Jacobi polynomials with α, β = -1/2.\n\nSee also: cheby1_series, cheby1_sum\n\n\n\n\n\n","category":"function"},{"location":"Chebyshev/#OpticsPolynomials.cheby1_series","page":"Chebyshev","title":"OpticsPolynomials.cheby1_series","text":"cheby1_series(ns, α, β, x)\n\nCompute a series of Chebyshev polynomials of the first kind of orders n. Returns an array with shape (size(x)..., length(ns)). That is, the final dimension contains the modes and the first dimension(s) are spatial.\n\nSee also: cheby1, cheby1_sum\n\n\n\n\n\n","category":"function"},{"location":"Chebyshev/#OpticsPolynomials.cheby1_sum","page":"Chebyshev","title":"OpticsPolynomials.cheby1_sum","text":"cheby1_sum(ns, weights, x)\n\nCompute a sum of Chebyshev polynomial of the first kind of order n weighted by weights.\n\nSee also: cheby1, cheby1_series\n\n\n\n\n\n","category":"function"},{"location":"Chebyshev/#OpticsPolynomials.cheby2","page":"Chebyshev","title":"OpticsPolynomials.cheby2","text":"cheby2(n, x)\n\nCompute the Chebyshev polynomial of the second kind of order n at point x.\n\nThis family of Chebyshev polynomials are a special case of the Jacobi polynomials with α, β = 1/2.\n\nSee also: cheby2_series, cheby2_sum\n\n\n\n\n\n","category":"function"},{"location":"Chebyshev/#OpticsPolynomials.cheby2_series","page":"Chebyshev","title":"OpticsPolynomials.cheby2_series","text":"cheby2_series(ns, α, β, x)\n\nCompute a series of Chebyshev polynomials of the second kind of orders n. Returns an array with shape (size(x)..., length(ns)). That is, the final dimension contains the modes and the first dimension(s) are spatial.\n\nSee also: cheby1, cheby1_sum\n\n\n\n\n\n","category":"function"},{"location":"Chebyshev/#OpticsPolynomials.cheby2_sum","page":"Chebyshev","title":"OpticsPolynomials.cheby2_sum","text":"cheby1_sum(ns, weights, x)\n\nCompute a sum of Chebyshev polynomial of the second kind of order n weighted by weights.\n\nSee also: cheby1, cheby1_series\n\n\n\n\n\n","category":"function"},{"location":"#OpticalPolynomials.jl","page":"OpticalPolynomials.jl","title":"OpticalPolynomials.jl","text":"","category":"section"},{"location":"","page":"OpticalPolynomials.jl","title":"OpticalPolynomials.jl","text":"OpticalPolynomials contains functions for quickly computing the various polynomials used in optics.  At this time, support is present for Zernike, Chebyshev, Legendre, and Jacobi polynomials.  Future support is planned for Forbes' Q polynomials, each of Qbfs, Qcon, and 2D-Q.","category":"page"},{"location":"#Installation","page":"OpticalPolynomials.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"OpticalPolynomials.jl","title":"OpticalPolynomials.jl","text":"OpticalPolynomials is a registered Julia package, it may be installed the usual way:","category":"page"},{"location":"","page":"OpticalPolynomials.jl","title":"OpticalPolynomials.jl","text":"julia> Pkg.add(\"OpticalPolynomials\")","category":"page"},{"location":"","page":"OpticalPolynomials.jl","title":"OpticalPolynomials.jl","text":"For information on usage for each polynomial set, see the previously linked pages.","category":"page"}]
}
